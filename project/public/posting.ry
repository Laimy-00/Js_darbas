from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
import os
import datetime
from sqlalchemy import Column, Integer, DateTime

basedir = os.path.abspath(os.path.dirname(__file__)) 
app = Flask(__name__) 
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'to_do.db') 
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app) 
ma = Marshmallow(app) 

# DB objektas
class Preke(db.Model): 
    __tablename__ = 'post' 
    id = db.Column(db.Integer, primary_key=True) 
    pavadinimas = db.Column("title", db.String) 
    kaina = db.Column("content", db.Float) 
    data = Column(DateTime, default=datetime.datetime.utcnow)
    
# UÅ¾duoties schema
class UzduotisSchema(ma.Schema): 
    class Meta: 
        fields = ('id', 'title', 'content')
        
        
uzduotis_schema = UzduotisSchema() 
uzduotys_schema = UzduotisSchema(many=True) 


# Crud
@app.route('/post', methods=['POST']) 
def prideti_preke(): 
    db.create_all() 
    title = request.json['title']
    content = request.json['content']
    data = datetime.datetime.utcnow()
    naujas_postas = Post(title=title, content=content, data=data)
    db.session.add(naujas_postas)
    db.session.commit() 
    return uzduotis_schema.jsonify(naujas_postas)
    
# cRud
@app.route('/preke', methods=['GET']) 
def gauti_visas_uzduotis(): 
    visi_postai = Post.query.all()
    rezultatas = uzduotys_schema.dump(visi_postai)
    return jsonify(rezultatas) 

# cRud
@app.route('/post/<id>', methods=['GET'])
def gauti_uzduoti(id):
    postas = Post.query.get(id)
    return uzduotis_schema.jsonify(postas)

# crUd
@app.route('/post/<id>', methods=['PUT'])
def pakeisti_uzduoti(id):
    postas = Post.query.get(id)
    postas.title = request.json['title']
    postas.content = request.json['content']
    postas.data = datetime.datetime.utcnow()
    db.session.commit()
    return uzduotis_schema.jsonify(postas) 

# cruD
@app.route('/post/<id>', methods=['DELETE'])
def istrinti_preke(id):
    postas = Post.query.get(id)
    db.session.delete(postas)
    db.session.commit()
    return uzduotis_schema.jsonify(postas) 

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8000, debug=True)
    db.create_all()